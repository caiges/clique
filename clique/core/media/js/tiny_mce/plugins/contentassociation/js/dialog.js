tinyMCEPopup.requireLangPack();

var ContentAssociationDialog = {
    
    content_items : [],

    update_content_items : function(label) {
        
        $('#content-items').html('');
        var first = content_items[label];
        var optionsHTML = new Array();
        for(var i = 0; i < first.length; i++ ) {
            optionsHTML.push('<option value="' + first[i].model + '-' + first[i].id + '">' + first[i].name + '</option>');
        }            
        $('#content-items').html(optionsHTML.join(''));
        
    },
    
	init : function() {
		var f = document.forms[0];
        
        var callbacks = {
            
            success : function(data) {
                content_items = jQuery.parseJSON(data);
                var labels = []
                for(ci in content_items) {
                    labels.push(ci);
                }
                labels.sort();
                for(var f = 0; f < labels.length; f++) {
                    $('#content-items-filter').append('<option value="' + labels[f] + '">' + labels[f] + '</option>');
                }
                var first = content_items[labels[0]];
                var optionsHTML = new Array();
                for(var i = 0; i < first.length; i++ ) {
                    optionsHTML.push('<option value="' + first[i].model + '-' + first[i].id + '">' + first[i].name + '</option>');
                }            
                $('#content-items').html(optionsHTML.join(''));
                $('#content-items-filter').change(function() {
                    ContentAssociationDialog.update_content_items($(this).val());
                });
            },
            
            error : function(data) {
                
            }
        }
            
        $.ajax({url : '/content-association/content_items.json', success : callbacks.success, error : callbacks.error});
       
	},
    
	insert : function() {
		// Insert/Edit the contents from the input into the document
		var ed = tinyMCEPopup.editor;
		var selectedNode = ed.selection.getNode();
        var selectedContentItem = $('#content-items :selected').val();
        var sourceItem = tinyMCEPopup.getWin().document.getElementById('model_name').value + '-' + tinyMCEPopup.getWin().document.getElementById('model_id').value;
        // selectedNode.id should be the UUID generated by the API. 
        var data = {item : selectedContentItem, source_item : sourceItem, model_field : ed.id, link_id : ($(selectedNode).attr('id') == undefined ? '' : $(selectedNode).attr('id'))}
		var callbacks = {
            
            success : function(data) {
                var content_association = jQuery.parseJSON(data);
                // Update the link with the data coming from the API.
                if(selectedNode.nodeName != 'A') { // New link.
        		    ed.execCommand('mceInsertContent', false, '<a id="' + content_association.target_model_link_id + '" href="' + content_association.target_model_link + '" rel="contentassociation">' + tinyMCEPopup.editor.selection.getContent({format : 'text'}) + '</a>');
        		} else { // Editing a link.
        		    ed.dom.setAttrib(selectedNode, 'href', content_association.target_model_link);
        		    
        		}
        		tinyMCEPopup.close();
            },
            
            error : function(data) {
                alert('Problem with content association.');
            }
        }
         
        $.ajax({url : '/content-association/content_items.json', type : 'POST', data : data, success : callbacks.success, error : callbacks.error});
        
	}
};

tinyMCEPopup.onInit.add(ContentAssociationDialog.init, ContentAssociationDialog);
